name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
  NEXT_PUBLIC_API_URL: http://localhost:3000/api

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Security audit and vulnerability check
        run: |
          # npm audit実行と結果の保存
          npm audit --json > security-audit.json || true
          # 高リスクの脆弱性がある場合は失敗
          npm audit --audit-level=high || (echo "High severity vulnerabilities found" && exit 1)
          # 依存関係の分析結果を保存
          npm list --json > dependencies.json

      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: |
            security-audit.json
            dependencies.json
            snyk-results.json

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run unit tests
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Setup database for E2E tests
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run E2E tests
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run dev
          wait-on: "http://localhost:3000"
          config-file: cypress.config.ts
          record: false
          browser: chrome
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            dev_docs/e2e_results/screenshots
            dev_docs/e2e_results/videos
            coverage/

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Server Components and Actions Security Check
        run: |
          # Server Componentsの静的解析
          npx @next/security-scanner . --json > server-components-scan.json
          # Server Actionsのセキュリティチェック
          npx @next/action-validator . --json > server-actions-scan.json
          # 結果の解析と失敗条件の設定
          node -e "
            const sc = require('./server-components-scan.json');
            const sa = require('./server-actions-scan.json');
            if (sc.criticalIssues > 0 || sa.criticalIssues > 0) {
              console.error('Critical security issues found');
              process.exit(1);
            }
          "

      - name: Generate security report
        run: |
          # 詳細なセキュリティレポートの生成
          echo "# Security Scan Report $(date)" > security-report.md
          echo "## Server Components Scan" >> security-report.md
          cat server-components-scan.json >> security-report.md
          echo "## Server Actions Scan" >> security-report.md
          cat server-actions-scan.json >> security-report.md

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            security-report.md
            server-components-scan.json
            server-actions-scan.json

  deploy:
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

      # デプロイ処理は環境に応じて適切な方法を選択
      - name: Deploy to production
        id: deploy
        run: |
          echo "Add your deployment steps here"
          echo "url=https://your-production-url.com" >> $GITHUB_OUTPUT
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
