generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MVPに必要な最小限のモデル定義

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  role           String    @default("USER") // USER or ADMIN
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  vendors        Vendor[]  @relation("VendorCreatedBy")
  invoices       Invoice[] @relation("InvoiceCreatedBy")
}

model Vendor {
  id          String    @id @default(cuid())
  name        String
  email       String
  phone       String?
  address     String?
  firstTag    String?   // 最初のタグ
  secondTag   String?   // 2番目のタグ
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("VendorCreatedBy", fields: [createdById], references: [id])
  createdById String
  invoices    Invoice[]

  @@index([createdById])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique // 請求書番号
  vendorId      String
  status        InvoiceStatus @default(DRAFT)
  totalAmount   Decimal       @db.Decimal(10, 2)
  issueDate     DateTime      // 発行日
  dueDate       DateTime      // 支払期限
  notes         String?       // 備考
  items         InvoiceItem[] // 請求項目
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User          @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  createdById   String
  vendor        Vendor        @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
  @@index([createdById])
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  name        String   // 項目名
  description String?  // 説明
  quantity    Int      // 数量
  unitPrice   Decimal  @db.Decimal(10, 2) // 単価
  taxRate     Decimal  @db.Decimal(5, 2)  // 税率
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
}

enum InvoiceStatus {
  DRAFT     // 下書き
  PENDING   // 承認待ち
  APPROVED  // 承認済み
  PAID      // 支払済み
  OVERDUE   // 支払期限超過
}
